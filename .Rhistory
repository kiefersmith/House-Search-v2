filter(LvngAreaSF >= (.90*sqft)) %>%
filter(LvngAreaSF <= (1.10*sqft))
addresses <- houses$Address
addresses2 <- paste(houses_filtered$Address, "Apex NC", sep = " ")
y <- matrix()
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y
addresses2
acres <- acresf[2]
acres
houses <- read_csv("Spreadsheet (1).csv")
houses$`Sold Price` <- as.numeric(gsub("[^0-9]","",houses$`Sold Price`))
sfrange <- range(houses$LvngAreaSF)
assign("sfrange", sfrange, envir = .GlobalEnv)
houses_filtered <- houses %>%
filter(Acres == acres)%>%
filter(LvngAreaSF >= (.90*sqft)) %>%
filter(LvngAreaSF <= (1.10*sqft))
if(length(houses_filtered) <= 0) {
return("Try fewer search constraints.")
} else {
addresses <- houses$Address
addresses2 <- paste(houses_filtered$Address, "Apex NC", sep = " ")
y <- matrix()
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
d <- substr(d, 0,4)
distance_from_subj<- cbind(houses_filtered$Address, d)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj <- cbind(distance_from_subj, z)
colnames(distance_from_subj) <- c("Address", "Distance From", "Longitude", "Latitude")
distance_from_subj <- left_join(houses_filtered, distance_from_subj, by = "Address")
assign("distance", distance_from_subj, envir = .GlobalEnv)
}
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
getGeoInfo(subj_address)
getGeoInfo("2756 Weaver Hill Drive")
install.packages("ggforce")
framework <- function() {
houses <- read_csv("Spreadsheet (1).csv")
houses$`Sold Price` <- as.numeric(gsub("[^0-9]","",houses$`Sold Price`))
subs <- unique(houses$Subdivision)
assign("subs", subs, envir = .GlobalEnv)
acresf <- unique(houses$Acres)
assign("acresf", acresf, envir = .GlobalEnv) #this order is wrong
years <- unique(houses$YrBlt)
assign("years", years, envir = .GlobalEnv)
assign("latitude", NA, envir = .GlobalEnv)
assign("longitude", NA, envir = .GlobalEnv)
assign("distance", NA, envir = .GlobalEnv)
assign("houses", houses, envir = .GlobalEnv)
}
framework()
houses <- read_csv("Spreadsheet (1).csv")
houses$`Sold Price` <- as.numeric(gsub("[^0-9]","",houses$`Sold Price`))
sfrange <- range(houses$LvngAreaSF)
assign("sfrange", sfrange, envir = .GlobalEnv)
sqft <- 3000
acin <- acresf[2]
subj_address <- "2219 Walden Creek Drive"
houses_filtered <- houses %>%
filter(Acres == acres)%>%
filter(LvngAreaSF >= (.90*sqft)) %>%
filter(LvngAreaSF <= (1.10*sqft))
acres <- acresf[2]
houses_filtered <- houses %>%
filter(Acres == acres)%>%
filter(LvngAreaSF >= (.90*sqft)) %>%
filter(LvngAreaSF <= (1.10*sqft))
addresses <- houses$Address
addresses2 <- paste(houses_filtered$Address, "Apex NC", sep = " ")
y <- matrix()
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
source("googleAPI2.R")
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
d <- substr(d, 0,4)
distance_from_subj<- cbind(houses_filtered$Address, d)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj <- cbind(distance_from_subj, z)
colnames(distance_from_subj) <- c("Address", "Distance From", "Longitude", "Latitude")
distance_from_subj <- left_join(houses_filtered, distance_from_subj, by = "Address")
assign("distance", distance_from_subj, envir = .GlobalEnv)
distance
distanceFrom <- function(subj_address, sqft, acres) {
setwd("~/Desktop/Programming/R/House Search v2")
houses <- read_csv("Spreadsheet (1).csv")
houses$`Sold Price` <- as.numeric(gsub("[^0-9]","",houses$`Sold Price`))
sfrange <- range(houses$LvngAreaSF)
assign("sfrange", sfrange, envir = .GlobalEnv)
houses_filtered <- houses %>%
filter(Acres == acres)%>%
filter(LvngAreaSF >= (.90*sqft)) %>%
filter(LvngAreaSF <= (1.10*sqft))
if(length(houses_filtered) <= 0) {
return("Try fewer search constraints.")
} else {
addresses <- houses$Address
addresses2 <- paste(houses_filtered$Address, "Apex NC", sep = " ")
y <- matrix()
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
d <- substr(d, 0,4)
distance_from_subj<- cbind(houses_filtered$Address, d)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj <- cbind(distance_from_subj, z)
colnames(distance_from_subj) <- c("Address", "Distance From", "Longitude", "Latitude")
distance_from_subj <- left_join(houses_filtered, distance_from_subj, by = "Address")
assign("distance", distance_from_subj, envir = .GlobalEnv)
}
distanceFrom(subj_address, sqft, acres)
distanceFrom(subj_address, 2000, acres)
sqft = 2000
framework
houses <- read_csv("Spreadsheet (1).csv")
houses$`Sold Price` <- as.numeric(gsub("[^0-9]","",houses$`Sold Price`))
sfrange <- range(houses$LvngAreaSF)
assign("sfrange", sfrange, envir = .GlobalEnv)
houses_filtered <- houses %>%
filter(Acres == acres)%>%
filter(LvngAreaSF >= (.90*sqft)) %>%
filter(LvngAreaSF <= (1.10*sqft))
addresses <- houses$Address
addresses2 <- paste(houses_filtered$Address, "Apex NC", sep = " ")
y <- matrix()
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
View(distance_from_subj)
y
addresses2
houses_filtered
distanceFrom <- function(subj_address, sqft, acres) {
setwd("~/Desktop/Programming/R/House Search v2")
houses <- read_csv("Spreadsheet (1).csv")
houses$`Sold Price` <- as.numeric(gsub("[^0-9]","",houses$`Sold Price`))
sfrange <- range(houses$LvngAreaSF)
assign("sfrange", sfrange, envir = .GlobalEnv)
houses_filtered <- houses %>%
filter(Acres == acres)%>%
filter(LvngAreaSF >= (.90*sqft)) %>%
filter(LvngAreaSF <= (1.10*sqft))
if(length(houses_filtered) <= 0) {
stop("Try fewer search constraints.")
} else {
addresses <- houses$Address
addresses2 <- paste(houses_filtered$Address, "Apex NC", sep = " ")
y <- matrix()
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
d <- substr(d, 0,4)
distance_from_subj<- cbind(houses_filtered$Address, d)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj <- cbind(distance_from_subj, z)
colnames(distance_from_subj) <- c("Address", "Distance From", "Longitude", "Latitude")
distance_from_subj <- left_join(houses_filtered, distance_from_subj, by = "Address")
assign("distance", distance_from_subj, envir = .GlobalEnv)
}
distanceFrom(subj_address, 2000, acres)
length(houses_filtered)
distanceFrom <- function(subj_address, sqft, acres) {
setwd("~/Desktop/Programming/R/House Search v2")
houses <- read_csv("Spreadsheet (1).csv")
houses$`Sold Price` <- as.numeric(gsub("[^0-9]","",houses$`Sold Price`))
sfrange <- range(houses$LvngAreaSF)
assign("sfrange", sfrange, envir = .GlobalEnv)
houses_filtered <- houses %>%
filter(Acres == acres)%>%
filter(LvngAreaSF >= (.90*sqft)) %>%
filter(LvngAreaSF <= (1.10*sqft))
if(length(houses_filtered$Address) <= 0) {
stop("Try fewer search constraints.")
} else {
addresses <- houses$Address
addresses2 <- paste(houses_filtered$Address, "Apex NC", sep = " ")
y <- matrix()
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
d <- substr(d, 0,4)
distance_from_subj<- cbind(houses_filtered$Address, d)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj <- cbind(distance_from_subj, z)
colnames(distance_from_subj) <- c("Address", "Distance From", "Longitude", "Latitude")
distance_from_subj <- left_join(houses_filtered, distance_from_subj, by = "Address")
assign("distance", distance_from_subj, envir = .GlobalEnv)
}
distanceFrom(subj_address, 2000, acres)
drawMap <- function(data){
map <- leaflet() %>%
addTiles(group = "Base") %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = longitude, lat = latitude, popup = subj_address) %>%
addMarkers(lng = data$Longitude, lat = data$Latitude, popup = paste(data$Address,data$`Sold Price`, data$`Distance From`, sep = "<br/>"))
}
distance_from_subj%>%
filter(`Distance From` <= dist)%>%
drawMap(distance_from_subj)
dist = 3
distance_from_subj%>%
filter(`Distance From` <= dist)%>%
drawMap(distance_from_subj)
map
drawMap <- function(data){
map <- leaflet() %>%
addTiles(group = "Base") %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(lng = longitude, lat = latitude, popup = subj_address) %>%
addMarkers(lng = data$Longitude, lat = data$Latitude, popup = paste(data$Address,data$`Sold Price`, data$`Distance From`, sep = "<br/>"))
return(map)
}
drawMap(distance_from_subj)
#maybe only load the fns needed?
#setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
Spreadsheet_1_ <- read_csv("Spreadsheet (1).csv")
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .5.R")
framework()
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
observeEvent(input$submit, { output$hist01 <- renderPlot({
if (length(distance$`Sold Price`)  <= 1)
return("Unable to generate graph.")
hist(distance$`Sold Price`,
breaks = (length(distance$`Sold Price`)/2),
main = "Sold Price Distribution",
xlab = "Price",
xlim = range(distance$`Sold Price`),
col = '#00DD00',
border = 'white')
})
shinyApp(ui = ui, server = server)
}
function (time)
i
#maybe only load the fns needed?
#setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
Spreadsheet_1_ <- read_csv("Spreadsheet (1).csv")
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .5.R")
framework()
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
#observeEvent(input$submit, { output$hist01 <- renderPlot({
#if (length(distance$`Sold Price`)  <= 1)
#return("Unable to generate graph.")
#hist(distance$`Sold Price`,
#breaks = (length(distance$`Sold Price`)/2),
#main = "Sold Price Distribution",
#xlab = "Price",
#xlim = range(distance$`Sold Price`),
#col = '#00DD00',
#border = 'white')
})
# })
#})
shinyApp(ui = ui, server = server)
}
distance_from_subj%>%
filter(`Distance From` <= dist)%>%
drawMap(distance_from_subj)
#maybe only load the fns needed?
#setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
Spreadsheet_1_ <- read_csv("Spreadsheet (1).csv")
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .5.R")
framework()
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
#observeEvent(input$submit, { output$hist01 <- renderPlot({
#if (length(distance$`Sold Price`)  <= 1)
#return("Unable to generate graph.")
#hist(distance$`Sold Price`,
#breaks = (length(distance$`Sold Price`)/2),
#main = "Sold Price Distribution",
#xlab = "Price",
#xlim = range(distance$`Sold Price`),
#col = '#00DD00',
#border = 'white')
})
# })
#})
shinyApp(ui = ui, server = server)
}
#maybe only load the fns needed?
#setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
Spreadsheet_1_ <- read_csv("Spreadsheet (1).csv")
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .5.R")
framework()
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
output$map01 <- distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
#observeEvent(input$submit, { output$hist01 <- renderPlot({
#if (length(distance$`Sold Price`)  <= 1)
#return("Unable to generate graph.")
#hist(distance$`Sold Price`,
#breaks = (length(distance$`Sold Price`)/2),
#main = "Sold Price Distribution",
#xlab = "Price",
#xlim = range(distance$`Sold Price`),
#col = '#00DD00',
#border = 'white')
})
# })
#})
shinyApp(ui = ui, server = server)
}
#maybe only load the fns needed?
#setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
Spreadsheet_1_ <- read_csv("Spreadsheet (1).csv")
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .5.R")
framework()
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
#observeEvent(input$submit, { output$hist01 <- renderPlot({
#if (length(distance$`Sold Price`)  <= 1)
#return("Unable to generate graph.")
#hist(distance$`Sold Price`,
#breaks = (length(distance$`Sold Price`)/2),
#main = "Sold Price Distribution",
#xlab = "Price",
#xlim = range(distance$`Sold Price`),
#col = '#00DD00',
#border = 'white')
})
# })
#})
shinyApp(ui = ui, server = server)
}
