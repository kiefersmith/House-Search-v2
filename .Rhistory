for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, latitude, longitude)
}
y
y <- y[-1]
y
length(y)
z <- matrix(y, ncol = 2, byrow = TRUE)
z
coords_matrix <- cbind2(z, addresses)
coords_matrix
coords_matrix$V1 <- as.numeric(coords_matrix$V1)
coords_matrix$V2 <- as.numeric(coords_matrix$V2)
coords_matrix <- as.data.frame(coords_matrix)
coords_matrix$V1 <- as.numeric(coords_matrix$V1)
coords_matrix$V2 <- as.numeric(coords_matrix$V2)
getGeoInfo("2219 Walden Creek Drive Apex NC")
distm(c(longitude, latitude), c(coords_matrix$V2[1], coords_matrix$V1[1]))
library(geosphere)
distm(c(longitude, latitude), c(coords_matrix$V2[1], coords_matrix$V1[1]))
distm(c(longitude, latitude), c(coords_matrix$V2[3], coords_matrix$V1[3]))
d <- distm(c(longitude, latitude), c(coords_matrix$V2[3], coords_matrix$V1[3]))
d/1609.34
d <- distm(c(longitude, latitude), c(coords_matrix$V2[3], coords_matrix$V1[3]), fun = distHaversine)
d
d <- distm(c(longitude, latitude), c(coords_matrix$V2[3], coords_matrix$V1[3]), fun = distVincentySphere)
d
d/1609.34
coords_matrix$V2[3]
y <- matrix()
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, latitude, longitude)
}
y
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
addresses <- as.matrix(addresses)
coords_matrix <- cbind2(z, addresses)
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, latitude, longitude)
}
y
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, latitude, longitude)
}
y
addresses <- houses$Address[1:20]
addresses <- paste(addresses, "apex NC", sep = " ")
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, latitude, longitude)
}
y
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
addresses <- as.matrix(addresses)
coords_matrix <- cbind2(z, addresses)
coords_matrix
coords_matrix[,1] <- as.integer(coords_matrix[,1])
coords_matrix
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, latitude, longitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
addresses <- as.matrix(addresses)
coords_matrix <- cbind2(z, addresses)
coords_matrix[,1] <- as.numeric(coords_matrix[,1])
coords_matrix
coords_matrix[,2] <- as.numeric(coords_matrix[,2])
distm(c(longitude, latitude), c(coords_matrix[1,1], coords_matrix[1,2]))
distm(c(longitude, latitude), c(coords_matrix[1,2], coords_matrix[1,1]))
typeof(longitude)
longitude <- as.numeric(longitude)
longitude
latitude <- as.numeric(latitude)
latitude
distm(c(longitude, latitude), c(coords_matrix[1,2], coords_matrix[1,1]))
typeof(latitude)
typeof(coords_matrix[1,2])
coords_matrix[,1] <- as.numeric(coords_matrix[,1])
coords_matrix[,2] <- as.numeric(coords_matrix[,2])
typeof(coords_matrix[1,2])
coords_matrix <- as.data.frame(coords_matrix)
coords_matrix
typeof(coords_matrix$V1)
typeof(coords_matrix$V2)
distm(c(longitude, latitude), c(coords_matrix$V2[1], coords_matrix$V1[1]))
coords_matrix
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
distm(c(longitude, latitude), c(coords_matrix$V2[1], coords_matrix$V1[1]))
getGeoInfo("2219 Walden Creek Drive Apex NC")
dat
getGeoInfo("200 West Street apex NC")
dat
distm(c(longitude, latitude), c(coords_matrix$V2[1], coords_matrix$V1[1]))
distm(c(coords_matrix$V2[2], coords_matrix$V1[2]), c(coords_matrix$V2[1], coords_matrix$V1[1]))
d <- distm(c(coords_matrix$V2[2], coords_matrix$V1[2]), c(coords_matrix$V2[1], coords_matrix$V1[1]))
d/1609.34
d <- distm(c(coords_matrix$V2[2], coords_matrix$V1[2]), c(coords_matrix$V2[1], coords_matrix$V1[1]), fun = distVincentySphere )
d
d <- distm(c(coords_matrix$V2[3], coords_matrix$V1[3]), c(coords_matrix$V2[1], coords_matrix$V1[1]), fun = distVincentySphere )
d
d/1609.34
coords_matrix
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, latitude, longitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
z
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
z
spDistsN1(z, c(longitude, latitude))
d <- spDistsN1(z, c(longitude, latitude))
d
d/1609.34
d <- spDistsN1(z, c(longitude, latitude), longlat = TRUE)
d
d*1.60934
getGeoInfo("2219 Walden Creek Drive apex nc")
d <- spDistsN1(z, c(longitude, latitude), longlat = TRUE)
d*1.60934
d/1.6
addresses
cbind(addresses, d)
d
d <- d/1.6
d
cbind(addresses, d)
library(readr)
Spreadsheet_1_ <- read_csv("~/Downloads/Spreadsheet (1).csv")
houses <- Spreadsheet_1_
addresses <- houses$Address[1:20]
addresses <- paste(addresses, "apex NC", sep = " ")
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
z
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo("subj_address")
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo("subj_address")
longitude_subj <- longitude
latitude_subj <- latitude
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo("subj_address")
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
cbind(addresses, d)
distance_from_subj<- cbind(addresses, d)
distance_from_subj
library(tidyverse)
distance_from_subj %>%
filter(d <= 2)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj %>%
filter(d <= 2)
addresses
addresses2
houses <- Spreadsheet_1_
addresses <- houses$Address[1:20]
addresses2 <- paste(addresses, "apex NC", sep = " ")
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
distance_from_subj<- cbind(addresses, d)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj
addresses <- houses$Address
addresses2 <- paste(addresses, "Apex NC", sep = " ")
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
addresses
houses
houses %>%
View(houses)
houses %>%
filter(Subdivision = Walden Creek)
houses %>%
filter(Subdivision = "Walden Creek")
houses %>%
filter(Subdivision == "Walden Creek")
houses <- Spreadsheet_1_
houses %>%
filter(Subdivision == "Walden Creek") #this should be an input from the user
addresses <- houses$Address
addresses2 <- paste(addresses, "Apex NC", sep = " ")
addresses
houses %>%
filter(Subdivision == "Walden Creek") #this should be an input from the user
addresses
houses_filtered <- houses %>%
filter(Subdivision == "Walden Creek") #this should be an input from the user
addresses <- houses_filtered$Address
addresses2 <- paste(addresses, "Apex NC", sep = " ")
y <- matrix()
addresses
addresses2
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
distance_from_subj<- cbind(addresses, d)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj
View(distance_from_subj)
#maybe only load the fns needed?
#setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
houses <- read_csv("~/Desktop/Programming/R/House Search v2/findable.csv")
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6.R")
source("framework.R")
framework()
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
#observeEvent(input$submit, { output$hist01 <- renderPlot({
#if (length(distance$`Sold Price`)  <= 1)
#return("Unable to generate graph.")
#hist(distance$`Sold Price`,
#breaks = (length(distance$`Sold Price`)/2),
#main = "Sold Price Distribution",
#xlab = "Price",
#xlim = range(distance$`Sold Price`),
#col = '#00DD00',
#border = 'white')
})
# })
#})
shinyApp(ui = ui, server = server)
}
#maybe only load the fns needed?
#setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
houses <- read_csv("~/Desktop/Programming/R/House Search v2/findable.csv")
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6.R")
source("framework.R")
framework()
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
#observeEvent(input$submit, { output$hist01 <- renderPlot({
#if (length(distance$`Sold Price`)  <= 1)
#return("Unable to generate graph.")
#hist(distance$`Sold Price`,
#breaks = (length(distance$`Sold Price`)/2),
#main = "Sold Price Distribution",
#xlab = "Price",
#xlim = range(distance$`Sold Price`),
#col = '#00DD00',
#border = 'white')
})
# })
#})
shinyApp(ui = ui, server = server)
}
houses
#maybe only load the fns needed?
#setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
houses <- read_csv("~/Desktop/Programming/R/House Search v2/findable.csv")
source("framework.R")
framework()
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6.R")
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
#observeEvent(input$submit, { output$hist01 <- renderPlot({
#if (length(distance$`Sold Price`)  <= 1)
#return("Unable to generate graph.")
#hist(distance$`Sold Price`,
#breaks = (length(distance$`Sold Price`)/2),
#main = "Sold Price Distribution",
#xlab = "Price",
#xlim = range(distance$`Sold Price`),
#col = '#00DD00',
#border = 'white')
})
# })
#})
shinyApp(ui = ui, server = server)
}
#maybe only load the fns needed?
#setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
houses <- read_csv("~/Desktop/Programming/R/House Search v2/findable.csv")
source("framework.R")
framework()
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6.R")
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
#observeEvent(input$submit, { output$hist01 <- renderPlot({
#if (length(distance$`Sold Price`)  <= 1)
#return("Unable to generate graph.")
#hist(distance$`Sold Price`,
#breaks = (length(distance$`Sold Price`)/2),
#main = "Sold Price Distribution",
#xlab = "Price",
#xlim = range(distance$`Sold Price`),
#col = '#00DD00',
#border = 'white')
})
# })
#})
shinyApp(ui = ui, server = server)
}
#maybe only load the fns needed?
setwd("~/Desktop/Programming/R/House Search v2")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
houses <- read_csv("~/Desktop/Programming/R/House Search v2/findable.csv")
source("framework.R")
framework()
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6.R")
if (interactive()){
ui <- fluidPage(
titlePanel("Apex Comp Search"),
mainPanel(
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit"),
leafletOutput("map01"),
plotOutput("hist01", height = 200)
)
server <- shinyServer(
function(input, output, session) {
#what address is being rendered#
#output$whatAdd <-renderText({input$address})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
getGeoInfo(input$address)
})
#observeEvent(input$submit, { output$hist01 <- renderPlot({
#if (length(distance$`Sold Price`)  <= 1)
#return("Unable to generate graph.")
#hist(distance$`Sold Price`,
#breaks = (length(distance$`Sold Price`)/2),
#main = "Sold Price Distribution",
#xlab = "Price",
#xlim = range(distance$`Sold Price`),
#col = '#00DD00',
#border = 'white')
})
# })
#})
shinyApp(ui = ui, server = server)
}
View(houses)
