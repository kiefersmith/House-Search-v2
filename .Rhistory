name=paste0("kiefer",i,".jpeg")
jpeg(name, width = 960, height = 960, units = "px", quality = 100)
doPlot(i)
dev.off()
# Once all images are stored I can create gif
library(magick)
frames=c()
images=list.files(pattern="jpeg")
for (i in length(images):1)
{
x=image_read(images[i])
x=image_scale(x, "300")
c(x, frames) -> frames
}
animation=image_animate(frames, fps = 2)
image_write(animation, "Frankenstein.gif")
library(imager)
library(dplyr)
library(deldir)
library(ggplot2)
library(scales)
# Download the image
#file="http://ereaderbackgrounds.com/movies/bw/Frankenstein.jpg"
#download.file(file, destfile = "kjs.jpg", mode = 'wb')
# Read and convert to grayscale
load.image("kjs2.jpg") %>% grayscale() -> x
# This is just to define frame limits
x %>%
as.data.frame() %>%
group_by() %>%
summarize(xmin=min(x), xmax=max(x), ymin=min(y), ymax=max(y)) %>%
as.vector()->rw
# Filter image to convert it to bw
x %>%
threshold("50%") %>%
as.cimg() %>%
as.data.frame() -> df
# Function to compute and plot Voronoi tesselation depending on sample size
doPlot = function(n)
{
#Voronoi tesselation
df %>%
sample_n(n, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> data
# This is just to add some alpha to lines depending on its longitude
data %>%
mutate(long=sqrt((x1-x2)^2+(y1-y2)^2),
alpha=findInterval(long, quantile(long, probs = seq(0, 1, length.out = 20)))/21)-> data
# A little bit of ggplot to plot results
data %>%
ggplot(aes(alpha=(1-alpha))) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), color="black", lwd=1) +
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0), trans=reverse_trans())+
theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())->plot
return(plot)
}
# I call the previous function and store resulting plot in jpeg format
#value = seq(0,1, length.out = nrow(df))
i=24000
name=paste0("kiefer",i,".jpeg")
jpeg(name, width = 960, height = 960, units = "px", quality = 100)
doPlot(i)
dev.off()
# Once all images are stored I can create gif
library(magick)
frames=c()
images=list.files(pattern="jpeg")
for (i in length(images):1)
{
x=image_read(images[i])
x=image_scale(x, "300")
c(x, frames) -> frames
}
animation=image_animate(frames, fps = 2)
image_write(animation, "Frankenstein.gif")
library(imager)
library(dplyr)
library(deldir)
library(ggplot2)
library(scales)
# Download the image
#file="http://ereaderbackgrounds.com/movies/bw/Frankenstein.jpg"
#download.file(file, destfile = "kjs.jpg", mode = 'wb')
# Read and convert to grayscale
load.image("kjs2.jpg") %>% grayscale() -> x
# This is just to define frame limits
x %>%
as.data.frame() %>%
group_by() %>%
summarize(xmin=min(x), xmax=max(x), ymin=min(y), ymax=max(y)) %>%
as.vector()->rw
# Filter image to convert it to bw
x %>%
threshold("50%") %>%
as.cimg() %>%
as.data.frame() -> df
# Function to compute and plot Voronoi tesselation depending on sample size
doPlot = function(n)
{
#Voronoi tesselation
df %>%
sample_n(n, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> data
# This is just to add some alpha to lines depending on its longitude
data %>%
mutate(long=sqrt((x1-x2)^2+(y1-y2)^2),
alpha=findInterval(long, quantile(long, probs = seq(0, 1, length.out = 20)))/21)-> data
# A little bit of ggplot to plot results
data %>%
ggplot(aes(alpha=(1-alpha))) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), color="black", lwd=1) +
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0), trans=reverse_trans())+
theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())->plot
return(plot)
}
# I call the previous function and store resulting plot in jpeg format
#value = seq(0,1, length.out = nrow(df))
i=24000
name=paste0("kiefer",i,".jpeg")
jpeg(name, width = 454, height = 679, units = "px", quality = 100)
doPlot(i)
dev.off()
# Once all images are stored I can create gif
library(magick)
frames=c()
images=list.files(pattern="jpeg")
for (i in length(images):1)
{
x=image_read(images[i])
x=image_scale(x, "300")
c(x, frames) -> frames
}
animation=image_animate(frames, fps = 2)
image_write(animation, "Frankenstein.gif")
library(imager)
library(dplyr)
library(deldir)
library(ggplot2)
library(scales)
# Download the image
#file="http://ereaderbackgrounds.com/movies/bw/Frankenstein.jpg"
#download.file(file, destfile = "kjs.jpg", mode = 'wb')
# Read and convert to grayscale
load.image("kjs2.jpg") %>% grayscale() -> x
# This is just to define frame limits
x %>%
as.data.frame() %>%
group_by() %>%
summarize(xmin=min(x), xmax=max(x), ymin=min(y), ymax=max(y)) %>%
as.vector()->rw
# Filter image to convert it to bw
x %>%
threshold("35%") %>%
as.cimg() %>%
as.data.frame() -> df
# Function to compute and plot Voronoi tesselation depending on sample size
doPlot = function(n)
{
#Voronoi tesselation
df %>%
sample_n(n, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> data
# This is just to add some alpha to lines depending on its longitude
data %>%
mutate(long=sqrt((x1-x2)^2+(y1-y2)^2),
alpha=findInterval(long, quantile(long, probs = seq(0, 1, length.out = 20)))/21)-> data
# A little bit of ggplot to plot results
data %>%
ggplot(aes(alpha=(1-alpha))) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), color="black", lwd=1) +
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0), trans=reverse_trans())+
theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())->plot
return(plot)
}
# I call the previous function and store resulting plot in jpeg format
#value = seq(0,1, length.out = nrow(df))
i=24000
name=paste0("kiefer",i,".jpeg")
jpeg(name, width = 454, height = 679, units = "px", quality = 100)
doPlot(i)
dev.off()
# Once all images are stored I can create gif
library(magick)
frames=c()
images=list.files(pattern="jpeg")
for (i in length(images):1)
{
x=image_read(images[i])
x=image_scale(x, "300")
c(x, frames) -> frames
}
animation=image_animate(frames, fps = 2)
image_write(animation, "Frankenstein.gif")
library(imager)
library(dplyr)
library(deldir)
library(ggplot2)
library(scales)
# Download the image
#file="http://ereaderbackgrounds.com/movies/bw/Frankenstein.jpg"
#download.file(file, destfile = "kjs.jpg", mode = 'wb')
# Read and convert to grayscale
load.image("kjs2.jpg") %>% grayscale() -> x
# This is just to define frame limits
x %>%
as.data.frame() %>%
group_by() %>%
summarize(xmin=min(x), xmax=max(x), ymin=min(y), ymax=max(y)) %>%
as.vector()->rw
# Filter image to convert it to bw
x %>%
threshold("75%") %>%
as.cimg() %>%
as.data.frame() -> df
# Function to compute and plot Voronoi tesselation depending on sample size
doPlot = function(n)
{
#Voronoi tesselation
df %>%
sample_n(n, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> data
# This is just to add some alpha to lines depending on its longitude
data %>%
mutate(long=sqrt((x1-x2)^2+(y1-y2)^2),
alpha=findInterval(long, quantile(long, probs = seq(0, 1, length.out = 20)))/21)-> data
# A little bit of ggplot to plot results
data %>%
ggplot(aes(alpha=(1-alpha))) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), color="black", lwd=1) +
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0), trans=reverse_trans())+
theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())->plot
return(plot)
}
# I call the previous function and store resulting plot in jpeg format
#value = seq(0,1, length.out = nrow(df))
i=24000
name=paste0("kiefer",i,".jpeg")
jpeg(name, width = 454, height = 679, units = "px", quality = 100)
doPlot(i)
dev.off()
# Once all images are stored I can create gif
library(magick)
frames=c()
images=list.files(pattern="jpeg")
for (i in length(images):1)
{
x=image_read(images[i])
x=image_scale(x, "300")
c(x, frames) -> frames
}
animation=image_animate(frames, fps = 2)
image_write(animation, "Frankenstein.gif")
library(imager)
library(dplyr)
library(deldir)
library(ggplot2)
library(scales)
# Download the image
#file="http://ereaderbackgrounds.com/movies/bw/Frankenstein.jpg"
#download.file(file, destfile = "kjs.jpg", mode = 'wb')
# Read and convert to grayscale
load.image("kjs2.jpg") %>% grayscale() -> x
# This is just to define frame limits
x %>%
as.data.frame() %>%
group_by() %>%
summarize(xmin=min(x), xmax=max(x), ymin=min(y), ymax=max(y)) %>%
as.vector()->rw
# Filter image to convert it to bw
x %>%
threshold("75%") %>%
as.cimg() %>%
as.data.frame() -> df
# Function to compute and plot Voronoi tesselation depending on sample size
doPlot = function(n)
{
#Voronoi tesselation
df %>%
sample_n(n, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> data
# This is just to add some alpha to lines depending on its longitude
data %>%
mutate(long=sqrt((x1-x2)^2+(y1-y2)^2),
alpha=findInterval(long, quantile(long, probs = seq(0, 1, length.out = 20)))/21)-> data
# A little bit of ggplot to plot results
data %>%
ggplot(aes(alpha=(1-alpha))) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), color="black", lwd=1) +
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0), trans=reverse_trans())+
theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())->plot
return(plot)
}
# I call the previous function and store resulting plot in jpeg format
#value = seq(0,1, length.out = nrow(df))
i=24000
name=paste0("kiefer",i,".jpeg")
jpeg(name, width = 454, height = 679, units = "px", quality = 100)
doPlot(i)
dev.off()
# Once all images are stored I can create gif
library(magick)
frames=c()
images=list.files(pattern="jpeg")
for (i in length(images):1)
{
x=image_read(images[i])
x=image_scale(x, "300")
c(x, frames) -> frames
}
animation=image_animate(frames, fps = 2)
image_write(animation, "Frankenstein.gif")
library(imager)
library(dplyr)
library(deldir)
library(ggplot2)
library(scales)
# Download the image
#file="http://ereaderbackgrounds.com/movies/bw/Frankenstein.jpg"
#download.file(file, destfile = "kjs.jpg", mode = 'wb')
# Read and convert to grayscale
load.image("kjs2.jpg") %>% grayscale() -> x
# This is just to define frame limits
x %>%
as.data.frame() %>%
group_by() %>%
summarize(xmin=min(x), xmax=max(x), ymin=min(y), ymax=max(y)) %>%
as.vector()->rw
# Filter image to convert it to bw
x %>%
threshold("75%") %>%
as.cimg() %>%
as.data.frame() -> df
# Function to compute and plot Voronoi tesselation depending on sample size
doPlot = function(n)
{
#Voronoi tesselation
df %>%
sample_n(n, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> data
# This is just to add some alpha to lines depending on its longitude
data %>%
mutate(long=sqrt((x1-x2)^2+(y1-y2)^2),
alpha=findInterval(long, quantile(long, probs = seq(0, 1, length.out = 20)))/21)-> data
# A little bit of ggplot to plot results
data %>%
ggplot(aes(alpha=(1-alpha))) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), color="black", lwd=1) +
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0), trans=reverse_trans())+
theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())->plot
return(plot)
}
# I call the previous function and store resulting plot in jpeg format
#value = seq(0,1, length.out = nrow(df))
i=12000
name=paste0("kiefer",i,".jpeg")
jpeg(name, width = 454, height = 679, units = "px", quality = 100)
doPlot(i)
dev.off()
# Once all images are stored I can create gif
library(magick)
frames=c()
images=list.files(pattern="jpeg")
for (i in length(images):1)
{
x=image_read(images[i])
x=image_scale(x, "300")
c(x, frames) -> frames
}
animation=image_animate(frames, fps = 2)
image_write(animation, "Frankenstein.gif")
library(imager)
library(dplyr)
library(deldir)
library(ggplot2)
library(scales)
# Download the image
#file="http://ereaderbackgrounds.com/movies/bw/Frankenstein.jpg"
#download.file(file, destfile = "kjs.jpg", mode = 'wb')
# Read and convert to grayscale
load.image("kjs2.jpg") %>% grayscale() -> x
# This is just to define frame limits
x %>%
as.data.frame() %>%
group_by() %>%
summarize(xmin=min(x), xmax=max(x), ymin=min(y), ymax=max(y)) %>%
as.vector()->rw
# Filter image to convert it to bw
x %>%
threshold("75%") %>%
as.cimg() %>%
as.data.frame() -> df
# Function to compute and plot Voronoi tesselation depending on sample size
doPlot = function(n)
{
#Voronoi tesselation
df %>%
sample_n(n, weight=(1-value)) %>%
select(x,y) %>%
deldir(rw=rw, sort=TRUE) %>%
.$dirsgs -> data
# This is just to add some alpha to lines depending on its longitude
data %>%
mutate(long=sqrt((x1-x2)^2+(y1-y2)^2),
alpha=findInterval(long, quantile(long, probs = seq(0, 1, length.out = 20)))/21)-> data
# A little bit of ggplot to plot results
data %>%
ggplot(aes(alpha=(1-alpha))) +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), color="black", lwd=1) +
scale_x_continuous(expand=c(0,0))+
scale_y_continuous(expand=c(0,0), trans=reverse_trans())+
theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())->plot
return(plot)
}
# I call the previous function and store resulting plot in jpeg format
#value = seq(0,1, length.out = nrow(df))
i=30000
name=paste0("kiefer",i,".jpeg")
jpeg(name, width = 454, height = 679, units = "px", quality = 100)
doPlot(i)
dev.off()
# Once all images are stored I can create gif
library(magick)
frames=c()
images=list.files(pattern="jpeg")
for (i in length(images):1)
{
x=image_read(images[i])
x=image_scale(x, "300")
c(x, frames) -> frames
}
animation=image_animate(frames, fps = 2)
image_write(animation, "Frankenstein.gif")
library(maps, maptools)
library(deldir, maps)
x <- rnorm(500, 0,1.5)
y <- rnorm(500, 0, 1)
x
vtess <- deldir(x,y)
vtess
plot(x,y,type='n', asp=1)
points(x,y, pch=20, col='red',cex=.5)
plot(x,y,type='n', asp=1)
plot.deldir(x,y,type='n', asp=1)
plot(vtess, wlines="tess", wpoints="none", number=FALSE, add=TRUE, lty=1)
plot.deldir(vtess, wlines="tess", wpoints="none", number=FALSE, add=TRUE, lty=1)
ggplot2
library(ggplot2)
apex <- read_csv("apex2.csv")
ggplot(data = )
setwd("~/Desktop/Programming/R/House Search v2")
apex <- read_csv("apex2.csv")
proj <- mapproject(apex$X, apex$Y, 'albers', param=c(39,45))
proj
ggplot(proj)
p
ggplot(aes(x=proj$x, y=proj$y)) +
geom_point()
ggplot(proj) +
geom_point(aes(x=proj$x, y=proj$y))
