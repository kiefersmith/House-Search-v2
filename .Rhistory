levels(acresf)
acresf <- factor(acresf, ordered = TRUE)
acresf
acresf <- unique(houses$Acres)
acresf
acresf <- factor(acresf, ordered = TRUE)
acresd
acresf
acres <- acresf
save(acres, "acres")
save(acres, "acres.RData")
saveRDS(acres, "acres.RData")
source("acres.RData")
readRDS('acres.RData')
acresfreadRDS('acres.RData')
acresf <- readRDS('acres.RData')
setwd("~/Desktop/Programming/R/House Search v2")
apex <- read_csv("~/Desktop/Programming/R/House Search v2/apex2.csv")
cary <- read_csv("~/Desktop/Programming/R/House Search v2/cary2.csv")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
options('scipen' = 1000)
source("framework_twocities.R")
framework_twocities(apex)
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6 .R")
load("schools.RData")
if (interactive()){
ui <- fluidPage(
titlePanel("Comp Search"),
fluidRow(
column(6,
selectInput("city", label = "City", c("Apex", "Cary")),
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000)
),
column(6,
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit")
)
),
hr(),
fluidRow(
column(12,
column(8,
leafletOutput("map01")
),
column(4,
plotOutput("hist01", height = 200)
),
hr(),
fluidRow(
column(12,
dataTableOutput("table01"))
)
server <- shinyServer(
function(input, output, session) {
observeEvent(input$city, {
if(input$city == "Apex") {
framework_twocities(apex)
} else if(input$city == "Cary") {
framework_twocities(cary)
}
})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
output$table01 <- renderDataTable({tableOut}, options = list(scrollX = TRUE)) #this was get ge0?
})
observeEvent(input$submit, { output$hist01 <- renderPlot({
if (length(distance$`Sold Price`)  <= 1){
return("Unable to generate graph.")} else{
hist(distance$`Sold Price`,
breaks = (50),
main = "Sold Price Distribution",
xlab = "Price",
xlim = range(houses$`Sold Price`),
col = '#00DD00',
border = 'white')
}
})
shinyApp(ui = ui, server = server)
}
acresf
order(acresf)
acresf[ordered(acresf),]
sort(acresf)
acres <- c("0-.25 Acres",".26-.5 Acres",".51-.75 Acres",".76-.99 Acres","1-2.9 Acres","3-5.9 Acres","6-10.9 Acres","11+ Acres")
saveRDS(acres, "acres.RData")
source("acres.RData")
readRDS('acres.RData')
setwd("~/Desktop/Programming/R/House Search v2")
apex <- read_csv("~/Desktop/Programming/R/House Search v2/apex2.csv")
cary <- read_csv("~/Desktop/Programming/R/House Search v2/cary2.csv")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
options('scipen' = 1000)
source("framework_twocities.R")
framework_twocities(apex)
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6 .R")
load("schools.RData")
if (interactive()){
ui <- fluidPage(
titlePanel("Comp Search"),
fluidRow(
column(6,
selectInput("city", label = "City", c("Apex", "Cary")),
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000)
),
column(6,
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit")
)
),
hr(),
fluidRow(
column(12,
column(8,
leafletOutput("map01")
),
column(4,
plotOutput("hist01", height = 200)
),
hr(),
fluidRow(
column(12,
dataTableOutput("table01"))
)
server <- shinyServer(
function(input, output, session) {
observeEvent(input$city, {
if(input$city == "Apex") {
framework_twocities(apex)
} else if(input$city == "Cary") {
framework_twocities(cary)
}
})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
output$table01 <- renderDataTable({tableOut}, options = list(scrollX = TRUE)) #this was get ge0?
})
observeEvent(input$submit, { output$hist01 <- renderPlot({
if (length(distance$`Sold Price`)  <= 1){
return("Unable to generate graph.")} else{
hist(distance$`Sold Price`,
breaks = (50),
main = "Sold Price Distribution",
xlab = "Price",
xlim = range(houses$`Sold Price`),
col = '#00DD00',
border = 'white')
}
})
shinyApp(ui = ui, server = server)
}
setwd("~/Desktop/Programming/R/House Search v2")
apex <- read_csv("~/Desktop/Programming/R/House Search v2/apex2.csv")
cary <- read_csv("~/Desktop/Programming/R/House Search v2/cary2.csv")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
options('scipen' = 1000)
source("framework_twocities.R")
framework_twocities(apex)
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6 .R")
load("schools.RData")
if (interactive()){
ui <- fluidPage(
titlePanel("Comp Search"),
fluidRow(
column(6,
selectInput("city", label = "City", c("Apex", "Cary")),
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000)
),
column(6,
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit")
)
),
hr(),
fluidRow(
column(12,
column(8,
leafletOutput("map01"),
renderText("This information is deemed reliable, but not guaranteed.  Data courtesy of the Triangle Multiple Listing Service.")
),
column(4,
plotOutput("hist01", height = 200)
),
hr(),
fluidRow(
column(12,
dataTableOutput("table01"))
)
server <- shinyServer(
function(input, output, session) {
observeEvent(input$city, {
if(input$city == "Apex") {
framework_twocities(apex)
} else if(input$city == "Cary") {
framework_twocities(cary)
}
})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
output$table01 <- renderDataTable({tableOut}, options = list(scrollX = TRUE)) #this was get ge0?
})
observeEvent(input$submit, { output$hist01 <- renderPlot({
if (length(distance$`Sold Price`)  <= 1){
return("Unable to generate graph.")} else{
hist(distance$`Sold Price`,
breaks = (50),
main = "Sold Price Distribution",
xlab = "Price",
xlim = range(houses$`Sold Price`),
col = '#00DD00',
border = 'white')
}
})
shinyApp(ui = ui, server = server)
}
apexschools <- schoolsdf %>%
filter(schoolsdf$features.properties$CITY == "Apex")
View(schoolsdf)
filter(schoolsdf$features.properties.CITY == "Apex")
filter(schoolsdf$features.properties$ADDRCITY_1 == "Apex")
class(schoolsdf)
class(schoolsdf$features.properties)
class()
class(schoolsdf$features.properties$ADDRCITY_1)
library(tidyverse)
schoolsdf$features.properties$ADDRCITY_1
schoolsdf$features.properties$ADDRCITY_1 =="Apex"
filter_()
filter_(schoolsdf$features.properties$ADDRCITY_1)
filter_(schoolsdf$features.properties$ADDRCITY_1 == Apex)
filter_(schoolsdf$features.properties$ADDRCITY_1 == 'Apex')
filter_(schoolsdf$features.properties$ADDRCITY_1 = 'Apex')
filter(schoolsdf$features.properties$ADDRCITY_1 == 'Apex')
schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Apex")
setwd("~/Desktop/Programming/R/House Search v2")
apex <- read_csv("~/Desktop/Programming/R/House Search v2/apex2.csv")
cary <- read_csv("~/Desktop/Programming/R/House Search v2/cary2.csv")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
options('scipen' = 1000)
source("framework_twocities.R")
framework_twocities(apex)
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6 .R")
load("schools.RData")
if (interactive()){
ui <- fluidPage(
titlePanel("Comp Search"),
fluidRow(
column(6,
selectInput("city", label = "City", c("Apex", "Cary")),
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000)
),
column(6,
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit")
)
),
hr(),
fluidRow(
column(12,
column(8,
leafletOutput("map01"),
renderText("This information is deemed reliable, but not guaranteed.  Data courtesy of the Triangle Multiple Listing Service.")
),
column(4,
plotOutput("hist01", height = 200)
),
hr(),
fluidRow(
column(12,
dataTableOutput("table01"))
)
server <- shinyServer(
function(input, output, session) {
observeEvent(input$city, {
if(input$city == "Apex") {
framework_twocities(apex)
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Apex")
} else if(input$city == "Cary") {
framework_twocities(cary)
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Cary")
}
})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
output$table01 <- renderDataTable({tableOut}, options = list(scrollX = TRUE)) #this was get ge0?
})
observeEvent(input$submit, { output$hist01 <- renderPlot({
if (length(distance$`Sold Price`)  <= 1){
return("Unable to generate graph.")} else{
hist(distance$`Sold Price`,
breaks = (50),
main = "Sold Price Distribution",
xlab = "Price",
xlim = range(houses$`Sold Price`),
col = '#00DD00',
border = 'white')
}
})
shinyApp(ui = ui, server = server)
}
setwd("~/Desktop/Programming/R/House Search v2")
apex <- read_csv("~/Desktop/Programming/R/House Search v2/apex2.csv")
cary <- read_csv("~/Desktop/Programming/R/House Search v2/cary2.csv")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
options('scipen' = 1000)
source("framework_twocities.R")
framework_twocities(apex)
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6 .R")
load("schools.RData")
if (interactive()){
ui <- fluidPage(
titlePanel("Comp Search"),
fluidRow(
column(6,
selectInput("city", label = "City", c("Apex", "Cary")),
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000)
),
column(6,
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit")
)
),
hr(),
fluidRow(
column(12,
column(8,
leafletOutput("map01"),
renderText("This information is deemed reliable, but not guaranteed.  Data courtesy of the Triangle Multiple Listing Service.")
),
column(4,
plotOutput("hist01", height = 200)
),
hr(),
fluidRow(
column(12,
dataTableOutput("table01"))
)
server <- shinyServer(
function(input, output, session) {
observeEvent(input$city, {
if(input$city == "Apex") {
framework_twocities(apex)
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Apex")
assign("cityschools", cityschools, envir = .GlobalEnv)
} else if(input$city == "Cary") {
framework_twocities(cary)
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Cary")
assign("cityschools", cityschools, envir = .GlobalEnv)
}
})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
output$table01 <- renderDataTable({tableOut}, options = list(scrollX = TRUE)) #this was get ge0?
})
observeEvent(input$submit, { output$hist01 <- renderPlot({
if (length(distance$`Sold Price`)  <= 1){
return("Unable to generate graph.")} else{
hist(distance$`Sold Price`,
breaks = (50),
main = "Sold Price Distribution",
xlab = "Price",
xlim = range(houses$`Sold Price`),
col = '#00DD00',
border = 'white')
}
})
shinyApp(ui = ui, server = server)
}
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Cary")
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Cary")
assign("cityschools", cityschools, envir = .GlobalEnv)
View(cityschools)
View(schoolsdf)
cityschools
cityschools <-schoolsdf$features.properties %>%
select(ADDRCITY_1 == "Cary")
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Cary")
assign("cityschools", cityschools, envir = .GlobalEnv)
cityschools
cityschools <-schoolsdf$features.properties %>%
select(ADDRCITY_1 == "Cary")
setwd("~/Desktop/Programming/R/House Search v2")
apex <- read_csv("~/Desktop/Programming/R/House Search v2/apex2.csv")
cary <- read_csv("~/Desktop/Programming/R/House Search v2/cary2.csv")
library(leaflet)
library(shiny)
library(readr)
library(tidyverse)
library(sp)
options('scipen' = 1000)
source("framework_twocities.R")
framework_twocities(apex)
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6 .R")
load("schools.RData")
if (interactive()){
ui <- fluidPage(
titlePanel("Comp Search"),
fluidRow(
column(6,
selectInput("city", label = "City", c("Apex", "Cary")),
textInput("address",label = "Insert Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("footage",label = "Square Footage", value = 2000)
),
column(6,
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit")
)
),
hr(),
fluidRow(
column(12,
column(8,
leafletOutput("map01"),
renderText("This information is deemed reliable, but not guaranteed.  Data courtesy of the Triangle Multiple Listing Service.")
),
column(4,
plotOutput("hist01", height = 200)
),
hr(),
fluidRow(
column(12,
dataTableOutput("table01"))
)
server <- shinyServer(
function(input, output, session) {
observeEvent(input$city, {
if(input$city == "Apex") {
framework_twocities(apex)
#cityschools <-schoolsdf$features.properties %>%
#filter(ADDRCITY_1 == "Apex")
#assign("cityschools", cityschools, envir = .GlobalEnv)
} else if(input$city == "Cary") {
framework_twocities(cary)
#cityschools <-schoolsdf$features.properties %>%
#filter(ADDRCITY_1 == "Cary")
#assign("cityschools", cityschools, envir = .GlobalEnv)
}
})
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres)
})
observeEvent(input$submit, {
output$table01 <- renderDataTable({tableOut}, options = list(scrollX = TRUE)) #this was get ge0?
})
observeEvent(input$submit, { output$hist01 <- renderPlot({
if (length(distance$`Sold Price`)  <= 1){
return("Unable to generate graph.")} else{
hist(distance$`Sold Price`,
breaks = (50),
main = "Sold Price Distribution",
xlab = "Price",
xlim = range(houses$`Sold Price`),
col = '#00DD00',
border = 'white')
}
})
shinyApp(ui = ui, server = server)
}
