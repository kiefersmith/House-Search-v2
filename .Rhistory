y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, latitude, longitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
z
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
z
spDistsN1(z, c(longitude, latitude))
d <- spDistsN1(z, c(longitude, latitude))
d
d/1609.34
d <- spDistsN1(z, c(longitude, latitude), longlat = TRUE)
d
d*1.60934
getGeoInfo("2219 Walden Creek Drive apex nc")
d <- spDistsN1(z, c(longitude, latitude), longlat = TRUE)
d*1.60934
d/1.6
addresses
cbind(addresses, d)
d
d <- d/1.6
d
cbind(addresses, d)
library(readr)
Spreadsheet_1_ <- read_csv("~/Downloads/Spreadsheet (1).csv")
houses <- Spreadsheet_1_
addresses <- houses$Address[1:20]
addresses <- paste(addresses, "apex NC", sep = " ")
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
z
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo("subj_address")
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo("subj_address")
longitude_subj <- longitude
latitude_subj <- latitude
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo("subj_address")
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
cbind(addresses, d)
distance_from_subj<- cbind(addresses, d)
distance_from_subj
library(tidyverse)
distance_from_subj %>%
filter(d <= 2)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj %>%
filter(d <= 2)
addresses
addresses2
houses <- Spreadsheet_1_
addresses <- houses$Address[1:20]
addresses2 <- paste(addresses, "apex NC", sep = " ")
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
distance_from_subj<- cbind(addresses, d)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj
addresses <- houses$Address
addresses2 <- paste(addresses, "Apex NC", sep = " ")
y <- matrix()
source("~/Desktop/Programming/R/House Search v2/googleAPI.R")
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
addresses
houses
houses %>%
View(houses)
houses %>%
filter(Subdivision = Walden Creek)
houses %>%
filter(Subdivision = "Walden Creek")
houses %>%
filter(Subdivision == "Walden Creek")
houses <- Spreadsheet_1_
houses %>%
filter(Subdivision == "Walden Creek") #this should be an input from the user
addresses <- houses$Address
addresses2 <- paste(addresses, "Apex NC", sep = " ")
addresses
houses %>%
filter(Subdivision == "Walden Creek") #this should be an input from the user
addresses
houses_filtered <- houses %>%
filter(Subdivision == "Walden Creek") #this should be an input from the user
addresses <- houses_filtered$Address
addresses2 <- paste(addresses, "Apex NC", sep = " ")
y <- matrix()
addresses
addresses2
for(a in addresses2) {
getGeoInfo(a)
y <- rbind(y, longitude, latitude)
}
y
y <- y[-1]
z <- matrix(y, ncol = 2, byrow = TRUE)
subj_address <- "2219 Walden CreeK Drive Apex, NC"
getGeoInfo(subj_address)
longitude_subj <- as.numeric(longitude)
latitude_subj <- as.numeric(latitude)
d <- spDistsN1(z, c(longitude_subj, latitude_subj), longlat = TRUE)
d <- d/1.60934
distance_from_subj<- cbind(addresses, d)
distance_from_subj <- as_tibble(distance_from_subj)
distance_from_subj
View(distance_from_subj)
models <- mtcars %>%
split(.$cyl) %>%
map(function(df) lm(mpg ~ wt, data = df))
library(tidyverse)
models <- mtcars %>%
split(.$cyl) %>%
map(function(df) lm(mpg ~ wt, data = df))
plot(models)
for (plot in models) {
plot(models)
}
models
models[1]
plot(models[1])
models <- mtcars %>%
split(.$cyl) %>%
map(~lm(mpg ~ wt, data = .))
models
models %>%
map(summary) %>%
map_dbl(~.$r.squared)
install.packages('purr')
install.packages('purrr')
install.packages("purrr")
library(purrr)
library(tidyverse)
every()
every
library(tidyverse)
library(modelr)
options(na.action = na.warn)
sim1
ggplot(sim1, aes(x,y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40)
a2 = runif(250, -5, 5)
)
models <- tibble(
a1 = runif(250, -20, 40)
a2 = runif(250, -5, 5)
)
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
models
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
models
ggplot(sim1, aes(x,y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) + geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
sim1
measure_distance <- funcion(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff^2))
}
measure_distance <- funcion(mod, data) {
diff <- data$y - model1(mod, data),
sqrt(mean(diff^2))
}
measure_distance <- funcion(mod, data) {
diff <- data$y - model1(mod, data),
sqrt(mean(diff ^ 2))
}
measure_distance <- funcion(mod, data) {
diff <- data$y - model1(mod, data),
sqrt(mean(diff ^ 2))
}
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data),
sqrt(mean(diff ^ 2))
}
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
resid(c(7,1.5), sim1)
resid(sim1)
models
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2, sim1dist))
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
MODELS
models
models <- models %>%
mutate(data = models, dist = purrr::map2_dbl(a1, a2, sim1_dist))
models <- models %>%
mutate(dist = map2_dbl(a1, a2, sim1_dist))
models
mutate(data = models, dist = map2_dbl(a1, a2, sim1_dist))
mutate(.data = models, dist = map2_dbl(a1, a2, sim1_dist))
models
library(tidyverse)
models <- models %>%
mutate(.data = models, dist = map2_dbl(a1, a2, sim1_dist))
models <- models %>%
mutate(dist = map2_dbl(a1, a2, sim1_dist))
sim1_dist()
mutate(dist = map2_dbl(a1, a2, sim1_dist()))
models <- models %>%
mutate(dist = map2_dbl(a1, a2, sim1_dist()))
sim1_dist()
sim1_dist
library(leaflet)
methods(leaflet())
methods(leaflet
)
update.packages("leaflet")
library(leaflet)
model.matrix()
rsconnect::showLogs()
library(httr)
GET()
request <- get(paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read" ))
client_id <- fbdb5127a914460e87ec8fc01da90ac3
request <- get(paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read" ))
client_id <- fbdb5127a914460e87ec8fc01da90ac3
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
request <- get(paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read" ))
request <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read" ))
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
request <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read", sep = "")
get(request)
request
GET(request)
response <- GET(request)
readlines(response)
library(jsonlite)
readlines(response)
readLines(response)
headers(response)
response
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
request <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read", sep = "")
response <- GET(request)
response
readLines(response)
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
request <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io%2fcallback", "&scope=user-top-read%20user-library-read", sep = "")
response
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
request <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io%2fcallback", "&scope=user-top-read%20user-library-read", sep = "")
response
content(response)
content(response, "text")
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
request <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io%2fcallback", "&scope=user-top-read%20user-library-read", sep = "")
request
response <- GET(request)
response
headers(response)
request
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
request <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io%2Fcallback", "&scope=user-top-read%20user-library-read", sep = "")
response <- GET(request)
response
headers(response)
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
request <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read", sep = "")
response <- GET(request)
response
headers(response)
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
request <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read", sep = "")
response <- GET(request)
code <- "AQBh6YUyvx6y6NzL3nyf4i0Jir7jvuzzzSMMsVhaCu1LP-863dB1_Ri3LENFXtac_u59clBM80aBEuTQF4xCmySLVz1n3M2cdPc9tAHJnec-QMi3q-JjCg0u5bamBPiI05QpNvNMS2XPNQSrdWyf8XZjpX4LaJ5MxAzQMkvwVhSVRKsdZW2B6JpvP3pwW__uOg29CAL0xcA2WJddDABkswRdkx43oku0c1tK13nv0NAD9orxAg"
spotify <- oauth_endpoint(request = NULL, authorize = 'https://accounts.spotify.com/authorize', access = 'https://accounts.spotify.com/api/token')
spotify
spotifyApp <- oauth_app(spotify, key = 'fbdb5127a914460e87ec8fc01da90ac3', secret = '042bf5858896439daeaa14da48195dfb')
spotifyApp
spotifyApp <- oauth_app('spotify', key = 'fbdb5127a914460e87ec8fc01da90ac3', secret = '042bf5858896439daeaa14da48195dfb')
spotifyApp
params <- list("response_type" = "code", "redirect_uri" = "https://kiefersmith.github.io")
params
token <- oauth2.0_token(spotify, spotifyApp, user_params = params, scope = c("user-top-read", "user-library-read"))
params <- list("response_type" = "code", "redirect_uri" = "https%3A%2F%2Fkiefersmith.github.io")
token <- oauth2.0_token(spotify, spotifyApp, user_params = params, scope = c("user-top-read", "user-library-read"))
spotify <- oauth_endpoint(request = NULL, authorize = 'https://accounts.spotify.com/authorize', access = 'https://accounts.spotify.com/api/token')
spotifyApp <- oauth_app('spotify', key = 'fbdb5127a914460e87ec8fc01da90ac3', secret = '042bf5858896439daeaa14da48195dfb')
params <- list("response_type" = "code", "redirect_uri" = "https%3A%2F%2Fkiefersmith.github.io")
token <- oauth2.0_token(spotify, spotifyApp, user_params = params, scope = c("user-top-read", "user-library-read"))
authorize <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read", sep = "")
authorize
token
token <- oauth2.0_token(spotify, spotifyApp, user_params = params, scope = c("user-top-read", "user-library-read"))
library(httr)
spotify <- oauth_endpoint(request = NULL, authorize = 'https://accounts.spotify.com/authorize', access = 'https://accounts.spotify.com/api/token')
spotifyApp <- oauth_app('spotify', key = 'fbdb5127a914460e87ec8fc01da90ac3', secret = '042bf5858896439daeaa14da48195dfb')
params <- list("response_type" = "code", "redirect_uri" = "https://kiefersmith.github.io")
token <- oauth2.0_token(spotify, spotifyApp, user_params = params, scope = c("user-top-read", "user-library-read"))
req <- GET("https://accounts.spotify.com/authorize", config(token = token))
stop_for_status(req)
token <- oauth2.0_token(spotify, spotifyApp, user_params = params, scope = c("user-top-read", "user-library-read"))
req <- GET("https://accounts.spotify.com/authorize", config(token = token))
stop_for_status(req)
token <- oauth2.0_token(spotify, spotifyApp, user_params = params, scope = c("user-top-read", "user-library-read"))
req <- GET("https://accounts.spotify.com/authorize", config(token = token))
spotify <- oauth_endpoint(request = NULL, authorize = 'https://accounts.spotify.com/authorize', access = 'https://accounts.spotify.com/api/token')
spotifyApp <- oauth_app('spotify', key = 'fbdb5127a914460e87ec8fc01da90ac3', secret = '042bf5858896439daeaa14da48195dfb')
params <- list("response_type" = "code", "redirect_uri" = "https://kiefersmith.github.io")
token <- oauth2.0_token(spotify, spotifyApp, user_params = params, scope = c("user-top-read", "user-library-read"))
authorize
authorize <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read", sep = "")
response <- GET(request)
client_id <- "fbdb5127a914460e87ec8fc01da90ac3"
authorize <- paste("https://accounts.spotify.com/authorize/?client_id=", client_id,"&response_type=code", "&redirect_uri=https%3A%2F%2Fkiefersmith.github.io", "&scope=user-top-read%20user-library-read", sep = "")
response <- GET(request)
response <- GET(authorize)
response
token <- oauth2.0_token("https://accounts.spotify.com/authorize/?client_id=fbdb5127a914460e87ec8fc01da90ac3&response_type=code&redirect_uri=https%3A%2F%2Fkiefersmith.github.io&scope=user-top-read%20user-library-read")
token <- oauth2.0_token(app = spotify, "https://accounts.spotify.com/authorize/?client_id=fbdb5127a914460e87ec8fc01da90ac3&response_type=code&redirect_uri=https%3A%2F%2Fkiefersmith.github.io&scope=user-top-read%20user-library-read")
token <- oauth2.0_token(spotifyApp, "https://accounts.spotify.com/authorize/?client_id=fbdb5127a914460e87ec8fc01da90ac3&response_type=code&redirect_uri=https%3A%2F%2Fkiefersmith.github.io&scope=user-top-read%20user-library-read")
library(readr)
Spreadsheet_6_ <- read_csv("~/Downloads/Spreadsheet (6).csv")
View(Spreadsheet_6_)
raleigh <- Spreadsheet_6_
raleigh$city <- "Raleigh"
raleigh$state <- "NC"
write_csv(raleigh, "raleigh.csv")
setwd("~/Desktop/Programming/R/House Search v2")
library(readr)
apex <- read_csv("apex2.csv")
cary <- read_csv("cary2.csv")
raleigh <- read_csv("raleigh.csv")
library(leaflet)
library(shiny)
library(tidyverse)
library(sp)
#library(modelr)
options('scipen' = 1000)
source("reType.R")
source("framework_retype.R")
framework_retype(apex)
source("googleAPI2.R")
#source("getZestVal2.R")
source("applyS .6 .R")
load("schools.RData", envir = .GlobalEnv)
#if (interactive()){
ui <- navbarPage("Comp Search v0.8",
tabPanel("Map",
fluidPage(
fluidRow(
column(6,
selectInput("city", label = "City", c("Apex", "Cary", "Raleigh")),
textInput("address",label = "Insert Subject Property Address", placeholder = "ex. The White House, 123 Main Street", value = "2219 Walden Creek Drive"),
numericInput("dist", label = "Miles from Subject", value = 3, max = 10)
),
column(6,
numericInput("footage",label = "Square Footage", value = 2000),
selectInput("acres",label = "How Many Acres?", acresf),
actionButton("submit","Submit")
)
),
hr(),
fluidRow(
column(12,
column(8,
leafletOutput("map01"),
textOutput("This information is deemed reliable, but not guaranteed.  Data courtesy of the Triangle Multiple Listing Service.")
),
column(4,
plotOutput("hist01", height = 200)
)
),
fluidRow(
column(12,
dataTableOutput("table01")
)
)),
tabPanel("Model",
fluidRow(
column(6,
selectInput("subdiv",label = "What subdivision?", subs), #need a not listed option
selectInput("new", label = "New construction?", c("No", "Yes")),
selectInput("type", label = "What type?", c("Attached" ,"Condo", "Detached" ,"Manufactured")),
numericInput("year", label = "Year built?", value = 2000, min = 1920, max = 2017)),
column(6,
numericInput("footageOther", label = "Other square footage?", value = 0),
numericInput("fire", label = "How many fireplaces?", value = 1),
numericInput("garage", label = "How many garages?", value = 1),
actionButton("submitModel","Submit")
),
hr(),
column(12,
textOutput("pred")
)
server <- shinyServer(
function(input, output, session) {
observeEvent(input$city, {
if(input$city == "Apex") {
framework_retype(apex)
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Apex")
assign("cityschools", cityschools, envir = .GlobalEnv)
} else if(input$city == "Cary") {
framework_retype(cary)
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Cary")
assign("cityschools", cityschools, envir = .GlobalEnv)
} else if(input$city == "Raleigh") {
framework_retype(raleigh)
cityschools <-schoolsdf$features.properties %>%
filter(ADDRCITY_1 == "Raleigh")
assign("cityschools", cityschools, envir = .GlobalEnv)
}}
)
observeEvent(input$submit, {
output$map01 <- renderLeaflet({distanceFrom(input$address, input$footage, input$acres,tol = .15, input$dist)
})
observeEvent(input$submit, {
output$table01 <- renderDataTable({tableOut}, options = list(scrollX = TRUE, pageLength = 10)) #this was get ge0?
})
observeEvent(input$submit, { output$hist01 <- renderPlot({
if (length(distance$`Sold Price`)  <= 1){
return("Unable to generate graph.")} else{   #different renders here
hist(distance$`Sold Price`,
breaks = (50),
main = "Sold Price Distribution",
xlab = "Price",
xlim = range(houses$`Sold Price`),
col = '#00DD00',
border = 'white')
}
})
observeEvent(input$submitModel, {
model <- lm(data = houses, `Sold Price` ~ LvngAreaSF + Subdivisio + YrBlt + `Total Othe` + `New Constr` + Fireplace + Garage + Acres + `Property T`)
subjData <- as.data.frame(cbind(input$footage, input$subdiv, input$year, input$footageOther, input$new, input$fire, input$garage, input$acres, input$type), stringsAsFactors = FALSE)
assign("subjData", subjData, envir = .GlobalEnv)
#subjData <- reType(subjData)
colnames(subjData) <- c("LvngAreaSF", "Subdivision", "YrBlt", "Total Othe", "New Constr", "Fireplace", "Garage", "Acres", "Property T")
subjData$LvngAreaSF <- as.numeric(subjData$LvngAreaSF)
subjData$Subdivisio <- as.factor(subjData$Subdivisio)
subjData$YrBlt <- as.integer(subjData$YrBlt)
subjData$`Total Othe` <- as.numeric(subjData$`Total Othe`)
subjData$`New Constr` <- as.factor(subjData$`New Constr`)
subjData$Fireplace <- as.numeric(subjData$Fireplace)
subjData$Garage <- as.integer(subjData$Garage)
subjData$Acres <- as.factor(subjData$Acres)
subjData$`Property Type` <- as.factor(subjData$`Property T`)
assign("subjData", subjData, envir = .GlobalEnv)
pred <- predict.lm(object = model, newdata = subjData, interval = "predict")
pred <- as.data.frame(pred)
lwr <- pred$lwr
fit <- pred$fit
upr <- pred$upr
output$pred <- renderText(paste("Lower:", lwr,"Predicted:", fit,"Upper:", upr, sep = "  "))
})
app <- shinyApp(ui = ui, server = server)
assign("app", app, envir = .GlobalEnv)
app
